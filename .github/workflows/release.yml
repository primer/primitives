name: Release
on:
  push:

jobs:
  release:
    name: Main
    if: ${{ github.repository == 'primer/primitives' && github.ref_name == 'main' }}

    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          # This makes Actions fetch all Git history so that Changesets can generate changelogs with the correct commits
          fetch-depth: 0
          persist-credentials: false

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --no-audit --no-fund && pushd docs; npm ci --no-audit --no-fund; popd

      - name: Build tokens
        run: npm run build

      - uses: actions/create-github-app-token@v1
        id: app-token
        with:
          app-id: ${{ vars.PRIMER_APP_ID_SHARED }}
          private-key: ${{ secrets.PRIMER_APP_PRIVATE_KEY_SHARED }}

      - name: Create release pull request or publish to npm
        id: changesets
        uses: changesets/action@v1.4.7
        continue-on-error: true
        with:
          title: Release Tracking
          # This expects you to have a script called release which does a build for your packages and calls changeset publish
          publish: npm run release
        env:
          GITHUB_TOKEN: ${{ steps.app-token.outputs.token }}

      - name: Output release version to summary
        if: ${{ steps.changesets.outputs.published}} = 'true'
        env:
          VERSION: ${{ steps.changesets.outputs.publishedPackages[0].version }}
          PACKAGE_NAME: ${{ steps.changesets.outputs.publishedPackages[0].name }}
        run: |
          echo "### Latest release" >> $GITHUB_STEP_SUMMARY
          echo "[v$VERSION](https://unpkg.com/$PACKAGE_NAME@$VERSION/)" >> $GITHUB_STEP_SUMMARY

  release-candidate:
    name: Candidate
    if: ${{ github.repository == 'primer/primitives' && github.ref_name == 'changeset-release/main' }}

    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          # This makes Actions fetch all Git history so that Changesets can generate changelogs with the correct commits
          fetch-depth: 0

      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --no-audit --no-fund --include=dev

      - name: Build tokens
        run: npm run build:tokens

      - name: Publish release candidate
        run: |
          version=$(jq -r .version package.json)
          echo "$( jq ".version = \"$(echo $version)-rc.$(git rev-parse --short HEAD)\"" package.json )" > package.json
          npm publish --tag next
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Output candidate version number
        id: commitStatus
        uses: actions/github-script@v7
        with:
          script: |
            const package = require(`${process.env.GITHUB_WORKSPACE}/package.json`)
            github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: context.sha,
              state: 'success',
              context: `Published ${package.name}`,
              description: package.version,
              target_url: `https://unpkg.com/${package.name}@${package.version}/`
            })
            // Output the release version for next step
            core.setOutput('packageVersion', package.version);
            // Output the package name for next step
            core.setOutput('packageName', package.name);

      - name: Output candidate version to summary
        env:
          VERSION: ${{ steps.commitStatus.outputs.packageVersion }}
          PACKAGE_NAME: ${{ steps.commitStatus.outputs.packageName }}
        run: |
          echo "### Latest release candidate" >> $GITHUB_STEP_SUMMARY
          echo "[v$VERSION](https://unpkg.com/$PACKAGE_NAME@$VERSION/)" >> $GITHUB_STEP_SUMMARY
      - uses: ./.github/actions/upload-versions

  release-canary:
    name: Canary
    if: ${{ github.repository == 'primer/primitives' && github.ref_name != 'main' && github.ref_name != 'changeset-release/main' }}

    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          # This makes Actions fetch all Git history so that Changesets can generate changelogs with the correct commits
          fetch-depth: 0

      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Install dependencies
        run: npm ci --no-audit --no-fund --include=dev

      - name: Build tokens
        run: npm run build:tokens

      - name: Publish canary version
        run: |
          echo "$( jq '.version = "0.0.0"' package.json )" > package.json
          echo -e "---\n'@primer/primitives': patch\n---\n\nFake entry to force publishing" > .changeset/force-snapshot-release.md
          npx changeset version --snapshot
          npx changeset publish --tag canary
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Output canary version number
        id: commitStatus
        uses: actions/github-script@v7
        with:
          script: |
            const package = require(`${process.env.GITHUB_WORKSPACE}/package.json`)
            github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: context.sha,
              state: 'success',
              context: `Published ${package.name}`,
              description: package.version,
              target_url: `https://unpkg.com/${package.name}@${package.version}/`
            })
            // Output the release version for next step
            core.setOutput('packageVersion', package.version);
            // Output the package name for next step
            core.setOutput('packageName', package.name);

      - name: Output canary version to summary
        env:
          VERSION: ${{ steps.commitStatus.outputs.packageVersion }}
          PACKAGE_NAME: ${{ steps.commitStatus.outputs.packageName }}
        run: |
          echo "### Latest canary release" >> $GITHUB_STEP_SUMMARY
          echo "[v$VERSION](https://unpkg.com/$PACKAGE_NAME@$VERSION/)" >> $GITHUB_STEP_SUMMARY
      - uses: ./.github/actions/upload-versions
