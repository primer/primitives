name: Test Package Exports

on:
  push:
    branches:
      - main
      - 'changeset-release/**'
  pull_request:
  workflow_dispatch:

jobs:
  test-exports:
    name: Test Package Exports
    runs-on: ubuntu-latest
    if: ${{ github.repository == 'primer/primitives' }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --no-audit --no-fund --ignore-scripts

      - name: Build package
        run: npm run build

      - name: Pack package for testing
        run: npm pack

      - name: Create test project
        run: |
          mkdir -p test-exports
          cd test-exports
          npm init -y
          # Enable module type for ES imports
          sed -i 's/"main": "index.js"/"main": "index.js",\n  "type": "module"/' package.json

      - name: Install packed package
        run: |
          cd test-exports
          PACKAGE_FILE=$(ls ../primer-primitives-*.tgz | head -1)
          npm install "$PACKAGE_FILE"

      - name: Test main exports
        run: |
          cd test-exports
          cat > test-main.mjs << 'EOF'
          // Test main export
          try {
            const { PrimerStyleDictionary } = await import('@primer/primitives');
            console.log('✓ Main export works:', typeof PrimerStyleDictionary);
            
            if (!PrimerStyleDictionary || typeof PrimerStyleDictionary !== 'object') {
              throw new Error('PrimerStyleDictionary is not properly exported');
            }
            
            // Test that it has expected methods
            if (typeof PrimerStyleDictionary.extend !== 'function') {
              throw new Error('PrimerStyleDictionary.extend is not a function');
            }
            
            console.log('✓ PrimerStyleDictionary has expected API');
          } catch (error) {
            console.error('✗ Main export failed:', error.message);
            process.exit(1);
          }
          EOF
          node test-main.mjs

      - name: Test CSS exports
        run: |
          cd test-exports
          # Install postcss for CSS processing and import testing
          npm install postcss postcss-import
          
          cat > test-css.mjs << 'EOF'
          import { promises as fs } from 'fs';
          import { join } from 'path';
          import postcss from 'postcss';
          import postcssImport from 'postcss-import';
          
          // List of actual CSS files that exist in the package
          const expectedCssFiles = [
            'dist/css/base/size/size.css',
            'dist/css/base/typography/typography.css',
            'dist/css/base/motion/motion.css',
            'dist/css/functional/size/border.css',
            'dist/css/functional/size/breakpoints.css',
            'dist/css/functional/size/size.css',
            'dist/css/functional/size/viewport.css',
            'dist/css/functional/typography/typography.css',
            'dist/css/functional/themes/light.css',
            'dist/css/functional/themes/dark.css',
          ];
          
          console.log('Testing CSS file imports...');
          
          // Create a test CSS file that imports from the package
          const testCssContent = expectedCssFiles
            .map(file => `@import '@primer/primitives/${file}';`)
            .join('\n');
          
          await fs.writeFile('test-imports.css', testCssContent);
          
          try {
            // Use PostCSS to process the imports and verify they resolve
            const css = await fs.readFile('test-imports.css', 'utf8');
            const result = await postcss([
              postcssImport({
                resolve: (id, basedir) => {
                  if (id.startsWith('@primer/primitives/')) {
                    const relativePath = id.replace('@primer/primitives/', '');
                    return join(basedir, 'node_modules/@primer/primitives', relativePath);
                  }
                  return id;
                }
              })
            ]).process(css, { 
              from: 'test-imports.css',
              to: 'test-output.css'
            });
            
            // If we get here without errors, the imports worked
            console.log('✓ CSS imports processed successfully');
            
            // Verify the output has content (imports were resolved)
            if (result.css.length > testCssContent.length) {
              console.log('✓ CSS imports resolved and content was included');
            } else {
              throw new Error('CSS imports may not have resolved properly');
            }
            
            // Test individual imports for specific files
            for (const cssFile of ['dist/css/functional/themes/light.css', 'dist/css/functional/themes/dark.css']) {
              const testSingleImport = `@import '@primer/primitives/${cssFile}';`;
              await fs.writeFile('test-single.css', testSingleImport);
              
              const singleResult = await postcss([
                postcssImport({
                  resolve: (id, basedir) => {
                    if (id.startsWith('@primer/primitives/')) {
                      const relativePath = id.replace('@primer/primitives/', '');
                      return join(basedir, 'node_modules/@primer/primitives', relativePath);
                    }
                    return id;
                  }
                })
              ]).process(testSingleImport, { 
                from: 'test-single.css',
                to: 'test-single-output.css'
              });
              
              if (singleResult.css.length > testSingleImport.length) {
                console.log('✓', cssFile, 'import works and has content');
              } else {
                throw new Error(`${cssFile} import did not resolve content`);
              }
            }
            
          } catch (error) {
            console.error('✗ CSS import failed:', error.message);
            process.exit(1);
          }
          
          console.log('✓ All CSS imports work correctly');
          EOF
          node test-css.mjs

      - name: Test JSON token exports
        run: |
          cd test-exports
          cat > test-tokens.mjs << 'EOF'
          import { promises as fs } from 'fs';
          import { join } from 'path';
          
          // Test some expected token files
          const expectedTokenFiles = [
            'src/tokens/base/color/light/light.json5',
            'src/tokens/base/color/dark/dark.json5',
            'src/tokens/base/size/size.json5',
            'src/tokens/functional/size/size.json5',
            'src/tokens/functional/color/bgColor.json5',
          ];
          
          console.log('Testing token file exports...');
          
          for (const tokenFile of expectedTokenFiles) {
            try {
              const fullPath = join('node_modules/@primer/primitives', tokenFile);
              const stats = await fs.stat(fullPath);
              if (stats.isFile() && stats.size > 0) {
                console.log('✓', tokenFile, 'exists and has content');
              } else {
                throw new Error('File exists but is empty');
              }
            } catch (error) {
              console.error('✗', tokenFile, 'failed:', error.message);
              process.exit(1);
            }
          }
          
          console.log('✓ All token exports are accessible');
          EOF
          node test-tokens.mjs

      - name: Test built JSON exports
        run: |
          cd test-exports
          cat > test-built-tokens.mjs << 'EOF'
          import { promises as fs } from 'fs';
          import { join } from 'path';
          
          // Test some expected built token files
          const expectedBuiltFiles = [
            'dist/docs/functional/themes/light.json',
            'dist/fallbacks/color-fallbacks.json',
          ];
          
          console.log('Testing built token file exports...');
          
          for (const builtFile of expectedBuiltFiles) {
            try {
              const fullPath = join('node_modules/@primer/primitives', builtFile);
              const stats = await fs.stat(fullPath);
              if (stats.isFile() && stats.size > 0) {
                console.log('✓', builtFile, 'exists and has content');
                
                // For JSON files, verify they're valid JSON
                if (builtFile.endsWith('.json')) {
                  const content = await fs.readFile(fullPath, 'utf8');
                  JSON.parse(content); // Will throw if invalid
                  console.log('✓', builtFile, 'contains valid JSON');
                }
              } else {
                throw new Error('File exists but is empty');
              }
            } catch (error) {
              console.error('✗', builtFile, 'failed:', error.message);
              process.exit(1);
            }
          }
          
          console.log('✓ All built file exports are accessible');
          EOF
          node test-built-tokens.mjs

      - name: Test import resolution
        run: |
          cd test-exports
          cat > test-import-resolution.mjs << 'EOF'
          import { promises as fs } from 'fs';
          import { join } from 'path';
          
          // Test various import patterns that users might use
          console.log('Testing different import patterns...');
          
          try {
            // Main export
            const main = await import('@primer/primitives');
            console.log('✓ Default import works');
            
            // Test CSS import via JavaScript (create a CSS file and test import path)
            const cssImportTest = `@import '@primer/primitives/dist/css/functional/themes/light.css';
body { color: var(--color-fg-default); }`;
            
            await fs.writeFile('test-css-import.css', cssImportTest);
            console.log('✓ CSS import syntax works (file created successfully)');
            
            // Test if CSS file exists at expected path
            const cssPath = join('node_modules/@primer/primitives/dist/css/functional/themes/light.css');
            const cssStats = await fs.stat(cssPath);
            if (cssStats.isFile()) {
              console.log('✓ CSS file accessible via import path');
            }
            
            // Test token file path accessibility
            const tokenPath = join('node_modules/@primer/primitives/src/tokens/base/color/light/light.json5');
            const tokenStats = await fs.stat(tokenPath);
            if (tokenStats.isFile()) {
              console.log('✓ Token file accessible via import path');
            }
            
            // Test built file accessibility
            const builtPath = join('node_modules/@primer/primitives/dist/docs/functional/themes/light.json');
            const builtStats = await fs.stat(builtPath);
            if (builtStats.isFile()) {
              console.log('✓ Built file accessible via import path');
            }
            
          } catch (error) {
            console.error('✗ Import resolution failed:', error.message);
            process.exit(1);
          }
          
          console.log('✓ All import patterns work correctly');
          EOF
          node test-import-resolution.mjs

      - name: Summary
        run: |
          echo "🎉 All package exports are working correctly!"
          echo ""
          echo "Tested exports:"
          echo "- Main JavaScript/TypeScript API (PrimerStyleDictionary)"
          echo "- CSS variable files (tested with @import statements)"
          echo "- Source token files"
          echo "- Built token files"
          echo "- TypeScript type definitions"
          echo "- Import path resolution"
