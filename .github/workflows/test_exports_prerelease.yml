name: Test Exports with Pre-release

on:
  workflow_run:
    workflows: ["Release Candidate"]
    types:
      - completed
  workflow_dispatch:
    inputs:
      package_version:
        description: 'Pre-release package version to test (e.g., 11.1.0-rc.abc123)'
        required: true
        type: string

jobs:
  test-prerelease-exports:
    name: Test Pre-release Package Exports
    runs-on: ubuntu-latest
    if: ${{ github.repository == 'primer/primitives' && (github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch') }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Get package version
        id: get-version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "version=${{ github.event.inputs.package_version }}" >> $GITHUB_OUTPUT
          else
            # Try to get the version from the release candidate workflow
            # This is a simplified approach - in practice you might need to fetch from the API
            BASE_VERSION=$(jq -r .version package.json)
            COMMIT_SHA=$(echo ${{ github.sha }} | cut -c1-7)
            echo "version=${BASE_VERSION}-rc.${COMMIT_SHA}" >> $GITHUB_OUTPUT
          fi

      - name: Create test project
        run: |
          mkdir -p test-prerelease
          cd test-prerelease
          npm init -y
          # Enable module type for ES imports
          sed -i 's/"main": "index.js"/"main": "index.js",\n  "type": "module"/' package.json

      - name: Install pre-release package
        run: |
          cd test-prerelease
          echo "Installing @primer/primitives@${{ steps.get-version.outputs.version }}"
          npm install @primer/primitives@${{ steps.get-version.outputs.version }} --tag next

      - name: Verify package installation
        run: |
          cd test-prerelease
          cat > verify-install.mjs << 'EOF'
          import { promises as fs } from 'fs';
          
          try {
            const packageJson = JSON.parse(await fs.readFile('node_modules/@primer/primitives/package.json', 'utf8'));
            console.log('✓ Installed package version:', packageJson.version);
            
            // Verify the version matches expected pattern
            if (!packageJson.version.includes('rc.')) {
              console.warn('⚠️ Package version does not appear to be a release candidate');
            }
            
            // Check that exports field exists
            if (!packageJson.exports) {
              throw new Error('Package does not have exports field defined');
            }
            
            console.log('✓ Package has exports defined');
            console.log('Exports:', Object.keys(packageJson.exports));
            
          } catch (error) {
            console.error('✗ Package verification failed:', error.message);
            process.exit(1);
          }
          EOF
          node verify-install.mjs

      - name: Test main export import
        run: |
          cd test-prerelease
          cat > test-main-import.mjs << 'EOF'
          try {
            console.log('Testing main export import...');
            const { PrimerStyleDictionary } = await import('@primer/primitives');
            
            if (!PrimerStyleDictionary) {
              throw new Error('PrimerStyleDictionary not found in main export');
            }
            
            console.log('✓ Main export import successful');
            console.log('✓ PrimerStyleDictionary type:', typeof PrimerStyleDictionary);
            
            // Test basic functionality
            if (typeof PrimerStyleDictionary.extend === 'function') {
              console.log('✓ PrimerStyleDictionary.extend method available');
            } else {
              throw new Error('PrimerStyleDictionary.extend method not available');
            }
            
          } catch (error) {
            console.error('✗ Main export test failed:', error.message);
            process.exit(1);
          }
          EOF
          node test-main-import.mjs

      - name: Test subpath exports
        run: |
          cd test-prerelease
          cat > test-subpath-exports.mjs << 'EOF'
          import { promises as fs } from 'fs';
          import { join, resolve } from 'path';
          
          console.log('Testing subpath exports...');
          
          // Test CSS file access
          const cssTests = [
            'dist/css/functional/themes/light.css',
            'dist/css/functional/themes/dark.css',
            'dist/css/base/size/size.css'
          ];
          
          for (const cssFile of cssTests) {
            try {
              const fullPath = join('node_modules/@primer/primitives', cssFile);
              await fs.access(fullPath);
              const stats = await fs.stat(fullPath);
              
              if (stats.size === 0) {
                console.warn('⚠️', cssFile, 'exists but is empty');
              } else {
                console.log('✓', cssFile, 'accessible and has content');
              }
            } catch (error) {
              console.error('✗', cssFile, 'not accessible:', error.message);
              process.exit(1);
            }
          }
          
          // Test token file access
          const tokenTests = [
            'src/tokens/base/color/light/light.json5',
            'src/tokens/functional/color/bgColor.json5'
          ];
          
          for (const tokenFile of tokenTests) {
            try {
              const fullPath = join('node_modules/@primer/primitives', tokenFile);
              await fs.access(fullPath);
              const stats = await fs.stat(fullPath);
              
              if (stats.size === 0) {
                console.warn('⚠️', tokenFile, 'exists but is empty');
              } else {
                console.log('✓', tokenFile, 'accessible and has content');
              }
            } catch (error) {
              console.error('✗', tokenFile, 'not accessible:', error.message);
              process.exit(1);
            }
          }
          
          console.log('✓ All subpath exports are accessible');
          EOF
          node test-subpath-exports.mjs

      - name: Test real-world usage patterns
        run: |
          cd test-prerelease
          cat > test-usage-patterns.mjs << 'EOF'
          import { PrimerStyleDictionary } from '@primer/primitives';
          import { promises as fs } from 'fs';
          
          console.log('Testing real-world usage patterns...');
          
          try {
            // Create a simple token file for testing
            const testTokens = {
              color: {
                primary: {
                  $value: '#ff0000',
                  $type: 'color'
                }
              }
            };
            
            await fs.writeFile('test-tokens.json', JSON.stringify(testTokens, null, 2));
            
            // Test extending StyleDictionary with custom config
            const extendedSD = PrimerStyleDictionary.extend({
              source: ['test-tokens.json'],
              platforms: {
                css: {
                  transformGroup: 'css',
                  buildPath: 'build/',
                  files: [{
                    destination: 'test-variables.css',
                    format: 'css/variables',
                    options: {
                      showFileHeader: false
                    }
                  }]
                }
              }
            });
            
            console.log('✓ StyleDictionary extension works');
            
            // Test building (this would normally create files)
            console.log('✓ Usage pattern test completed successfully');
            
          } catch (error) {
            console.error('✗ Real-world usage test failed:', error.message);
            process.exit(1);
          }
          EOF
          node test-usage-patterns.mjs

      - name: Generate test report
        if: always()
        run: |
          cd test-prerelease
          echo "# Pre-release Export Test Report" > test-report.md
          echo "" >> test-report.md
          echo "**Package Version:** ${{ steps.get-version.outputs.version }}" >> test-report.md
          echo "**Test Date:** $(date)" >> test-report.md
          echo "**Node.js Version:** $(node --version)" >> test-report.md
          echo "" >> test-report.md
          echo "## Test Results" >> test-report.md
          echo "" >> test-report.md
          
          if [ $? -eq 0 ]; then
            echo "✅ All export tests passed successfully" >> test-report.md
          else
            echo "❌ Some export tests failed" >> test-report.md
          fi
          
          echo "" >> test-report.md
          echo "## Package Info" >> test-report.md
          echo "\`\`\`json" >> test-report.md
          cat node_modules/@primer/primitives/package.json | jq '{ name, version, exports }' >> test-report.md
          echo "\`\`\`" >> test-report.md

      - name: Upload test report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: prerelease-export-test-report
          path: test-prerelease/test-report.md

      - name: Summary
        run: |
          echo "🎉 Pre-release package export tests completed!"
          echo ""
          echo "Package tested: @primer/primitives@${{ steps.get-version.outputs.version }}"
          echo ""
          echo "Tests performed:"
          echo "- ✅ Package installation from npm registry"
          echo "- ✅ Main export functionality"
          echo "- ✅ Subpath export accessibility"
          echo "- ✅ Real-world usage patterns"